# DSBDA Assignment 4-1 - Visualization on Air Quality Dataset

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Load dataset
df = pd.read_csv('/content/AirQuality.csv', delimiter=';')

df.head()

# Rename columns if present (optional based on dataset)
df = df.rename(columns={'T': 'Temperature'})
df = df.rename(columns={'RH': 'Relative Humidity'})
df = df.rename(columns={'AH': 'Absolute Humidity'})

df.head()

# Drop unnamed columns if present
df = df.drop(['Unnamed: 15', 'Unnamed: 16'], axis=1, errors='ignore')

df['CO(GT)'] = df['CO(GT)'].astype(str).str.replace(',', '.').astype(float)
df['C6H6(GT)'] = df['C6H6(GT)'].astype(str).str.replace(',', '.').astype(float)
df['Temperature'] = df['Temperature'].astype(str).str.replace(',', '.').astype(float)
df['Relative Humidity'] = df['Relative Humidity'].astype(str).str.replace(',', '.').astype(float)
df['Absolute Humidity'] = df['Absolute Humidity'].astype(str).str.replace(',', '.').astype(float)

# Remove duplicate rows
df = df.drop_duplicates()

# Fill numeric NaNs with mean
df = df.fillna(df.mean(numeric_only=True))

# Drop remaining NaNs (from non-numeric columns)
df = df.dropna()

# Scale Absolute Humidity
df['Absolute Humidity'] = df['Absolute Humidity'].multiply(100)

# Remove outliers from selected columns
cols = ['Temperature', 'Relative Humidity', 'Absolute Humidity',
        'PT08.S4(NO2)', 'PT08.S5(O3)', 'C6H6(GT)', 'PT08.S2(NMHC)', 'PT08.S1(CO)']
for col in cols:
    df[col] = remove_outliers(df[col])

# Convert Date to datetime
df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y', errors='coerce')
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month
df['yearr'] = df['Year'].astype(str)
df['month'] = df['Month'].astype(str)

# 1. Heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()

# 2. Line plots
sns.lineplot(df, x='Month', y='Absolute Humidity')
plt.show()

# 2. Line plots
sns.lineplot(df, x='month', y='Temperature')
plt.show()

# 3. Bar plot
sns.barplot(df, x='month', y='CO(GT)')
plt.show()

# 4. Scatter plot
sns.scatterplot(df, x='PT08.S1(CO)', y='PT08.S5(O3)', hue='yearr')
plt.show()

# 5. Pie chart
co_counts = df['CO(GT)'].value_counts().nlargest(5)
plt.figure(figsize=(6, 6))
co_counts.plot.pie(autopct='%1.1f%%', colors=["skyblue", "lightcoral", "gold", "lightgreen", "violet"], startangle=90)
plt.title("CO Levels Distribution")
plt.ylabel("")
plt.show()


# 6. Histogram
sns.histplot(df['Temperature'], bins=20, kde=True, color='red')
plt.title("Temperature Distribution")
plt.xlabel("Temperature (Â°C)")
plt.ylabel("Frequency")
plt.show()

# 7. Violin plot
df["Category"] = "CO Levels"
sns.violinplot(x=df["Category"], y=df["CO(GT)"], color="skyblue")
plt.title("CO Levels Violin Plot")
plt.xlabel("Category")
plt.ylabel("CO(GT)")
plt.show()

# 8. Box plot
sns.boxplot(data=df, x='Month', y='Temperature')
plt.title('Box Plot of Temperature by Month')
plt.xlabel('Month')
plt.ylabel('Temperature')
plt.show()
